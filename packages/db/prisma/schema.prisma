generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId     String       @id @default(cuid())
  username   String
  otp        String
  mobile     String       @unique
  token      String       @default("")
  suspended  Boolean      @default(false)
  deviceId   String?
  payments   Payments[]
  rooms RoomPlayer[]
  wallet     Wallet?
  winnings Room[]
  withdraws Withdraw[]
}

model Wallet {
  walletId       String   @id @default(cuid())
  userId         String   @unique
  currentBalance Float    @default(500)
  depositAmount  Float    @default(0)
  winningAmount  Float    @default(0)
  cashbackAmount Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Admin {
  adminId  String @id @default(cuid())
  name     String
  email    String @unique
  password String
  role     Role   @default(admin)
}

model Banner {
  bannerId  String   @id @default(cuid())
  title     String
  imageUrl  String  @db.Text
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)
}

model Payments {
  transactionId String        @id @default(cuid())
  userId        String
  orderId       String        @unique
  paymentId     String?
  signature     String?
  currency      String        @default("INR")
  amount        Float
  status        PaymentStatus @default(Pending)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [userId])
}

model Game {
  gameId     String   @id @default(cuid())
  gameType   GameType
  maxPlayers Int      @default(2)
  entryFee   Float
  prizePool  Float
  currency   String   @default("INR")
  isActive   Boolean  @default(true)
  rooms      Room[]
}

model Room {
  roomId   String       @id @default(cuid())
  gameId   String
  status   GameStatus   @default(Running)
  game     Game         @relation(fields: [gameId], references: [gameId])
  players  RoomPlayer[]
  winnerId String?
  winner   User?        @relation(fields: [winnerId], references: [userId])
}

model RoomPlayer {
  playerId String @id @default(cuid())
  roomId   String
  userId   String
  room     Room   @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Ticket {
  ticketId    String       @id @default(cuid())
  issue       String
  email       String
  name        String
  description String
  status      TicketStatus @default(Open)
  createdAt   DateTime     @default(now())
  image       String?
}

model Withdraw {
  withdrawId  String  @id @default(cuid())
  userId       String
  user         User   @relation(fields: [userId], references: [userId])
  amount       Float
  status       WithdrawalStatus  @default(PENDING) // PENDING, SUCCESS, FAILED
  timestamp    DateTime @default(now())
}

enum WithdrawalStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentStatus {
  Pending
  Paid
  Failed
}

enum Role {
  admin
  superadmin
  employee
}

enum GameStatus {
  Running
  Finished
}

enum GameType {
  LUDO
  FAST_LUDO
  CRICKET
  RUMMY
  MEMORYGAME
}

enum TicketStatus {
  Open
  Closed
}

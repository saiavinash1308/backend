generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId        String            @id @default(cuid())
  username      String
  otp           String
  mobile        String            @unique
  token         String            @default("")
  suspended     Boolean           @default(false)
  deviceId      String?
  referralCode  String?           @unique
  referredBy    Referral?         @relation("Referee")
  referrals     Referral[]        @relation("Referrer")
  payments      Payments[]
  wallet        Wallet?
  rooms   RoomParticipant[]
  winnings  Room[]            @relation("Winnings")
  withdraws     Withdraw[]
}

model Wallet {
  walletId       String   @id @default(cuid())
  userId         String   @unique
  currentBalance Float    @default(500)
  depositAmount  Float    @default(0)
  winningAmount  Float    @default(0)
  cashbackAmount Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Admin {
  adminId  String @id @default(cuid())
  name     String
  email    String @unique
  password String
  role     Role   @default(admin)
}

model Banner {
  bannerId  String   @id @default(cuid())
  title     String
  imageUrl  String   @db.Text
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)
}

model Payments {
  transactionId String        @id @default(cuid())
  userId        String
  orderId       String        @unique
  paymentId     String?
  signature     String?
  currency      String        @default("INR")
  amount        Float
  status        PaymentStatus @default(Pending)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [userId])
}

model Game {
  gameId     String   @id @default(cuid())
  gameType   GameType
  maxPlayers Int      @default(2)
  entryFee   Float
  prizePool  Float
  currency   String   @default("INR")
  isActive   Boolean  @default(true)
  rooms      Room[]   
}

model Room {
  roomId         String            @id @default(cuid())
  gameId         String
  status         GameStatus        @default(Running)
  game           Game              @relation(fields: [gameId], references: [gameId])
  participants   RoomParticipant[]
  winnerId       String?
  winner         User?             @relation("Winnings", fields: [winnerId], references: [userId])
}

model RoomParticipant {
  id        String   @id @default(cuid())
  roomId    String
  userId    String
  joinedAt  DateTime @default(now())

  room      Room     @relation(fields: [roomId], references: [roomId])
  user      User     @relation(fields: [userId], references: [userId])

  @@unique([roomId, userId])
}

model Ticket {
  ticketId    String       @id @default(cuid())
  issue       String
  email       String
  name        String
  description String
  status      TicketStatus @default(Open)
  createdAt   DateTime     @default(now())
  image       String?
}

model Withdraw {
  withdrawId   String           @id @default(cuid())
  userId       String
  amount       Float
  status       WithdrawalStatus @default(PENDING)
  timestamp    DateTime         @default(now())
  user         User             @relation(fields: [userId], references: [userId])
}

model Referral {
  referralId String @id @default(cuid())
  refereeId  String @unique
  referrerId String
  bonus      Float  @default(10)

  referee    User   @relation("Referee", fields: [refereeId], references: [userId])
  referrer   User   @relation("Referrer", fields: [referrerId], references: [userId])

  @@unique([refereeId, referrerId])
}

model Feedback{
  feedBackId String @id @default(cuid())
  message String
}

enum WithdrawalStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentStatus {
  Pending
  Paid
  Failed
}

enum Role {
  admin
  superadmin
  employee
}

enum GameStatus {
  Running
  Finished
}

enum GameType {
  LUDO
  FAST_LUDO
  CRICKET
  RUMMY
  MEMORYGAME
}

enum TicketStatus {
  Open
  Closed
}
